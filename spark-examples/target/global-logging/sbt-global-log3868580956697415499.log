[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\swathi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\swathi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.9 (Oracle Corporation Java 11.0.8)
[debug]       Load.loadUnit: plugins took 2743.554ms
[debug]       Load.loadUnit: defsScala took 2.3834ms
[debug] [Loading] Scanning directory C:\Users\swathi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swathi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 620.0291 ms
[debug]           Load.resolveProject(global-plugins) took 1338.663ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\swathi\.sbt\1.0\plugins, plugins: List(<none>))) took 2639.1263ms
[debug] [Loading] Done in C:\Users\swathi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 3367.4684ms
[debug]       Load.loadUnit: cleanEvalClasses took 4.9108ms
[debug]     Load.loadUnit(file:/C:/Users/swathi/.sbt/1.0/plugins/, ...) took 6337.3571ms
[debug]   Load.apply: load took 11980.133ms
[debug]   Load.apply: resolveProjects took 64.5772ms
[debug]   Load.apply: finalTransforms took 1413.9908ms
[debug]   Load.apply: config.delegates took 152.4931ms
[debug]   Load.apply: Def.make(settings)... took 171573.272ms
[debug]   Load.apply: structureIndex took 3008.2722ms
[debug]   Load.apply: mkStreams took 65.2468ms
[info] loading global plugins from C:\Users\swathi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 392556.8618ms
[debug]           Load.loadUnit: plugins took 616.1617ms
[debug]           Load.loadUnit: defsScala took 0.0265ms
[debug] [Loading] Scanning directory C:\Users\swathi\Documents\codes\spark\SparkScalaCourse\project
[debug]             Load.loadUnit: mkEval took 794.4516ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swathi\Documents\codes\spark\SparkScalaCourse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 66.3156 ms
[info] loading settings for project sparkscalacourse-build from idea.sbt ...
[debug]               Load.resolveProject(sparkscalacourse-build) took 106.1534ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkscalacourse-build, base: C:\Users\swathi\Documents\codes\spark\SparkScalaCourse\project, plugins: List(<none>))) took 191.1232ms
[debug] [Loading] Done in C:\Users\swathi\Documents\codes\spark\SparkScalaCourse\project, returning: (sparkscalacourse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 53079.0036ms
[debug]           Load.loadUnit: cleanEvalClasses took 741.4167ms
[debug]         Load.loadUnit(file:/C:/Users/swathi/Documents/codes/spark/SparkScalaCourse/project/, ...) took 54444.1025ms
[debug]       Load.apply: load took 54457.0043ms
[debug]       Load.apply: resolveProjects took 0.6508ms
[debug]       Load.apply: finalTransforms took 123.2093ms
[debug]       Load.apply: config.delegates took 2.529ms
[debug]       Load.apply: Def.make(settings)... took 2122.5684ms
[debug]       Load.apply: structureIndex took 726.1705ms
[debug]       Load.apply: mkStreams took 0.0098ms
[info] loading project definition from C:\Users\swathi\Documents\codes\spark\SparkScalaCourse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 87189.1791ms
[debug]     Load.loadUnit: defsScala took 0.0181ms
[debug] [Loading] Scanning directory C:\Users\swathi\Documents\codes\spark\SparkScalaCourse
[debug]       Load.loadUnit: mkEval took 2.4109ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swathi\Documents\codes\spark\SparkScalaCourse, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 42.9762 ms
[info] loading settings for project sparkscalacourse from build.sbt ...
[debug]         Load.resolveProject(sparkscalacourse) took 566.6555ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkscalacourse, base: C:\Users\swathi\Documents\codes\spark\SparkScalaCourse, plugins: List(<none>))) took 641.0871ms
[debug] [Loading] Done in C:\Users\swathi\Documents\codes\spark\SparkScalaCourse, returning: (sparkscalacourse)
[debug]     Load.loadUnit: loadedProjectsRaw took 33675.315ms
[debug]     Load.loadUnit: cleanEvalClasses took 515.3931ms
[debug]   Load.loadUnit(file:/C:/Users/swathi/Documents/codes/spark/SparkScalaCourse/, ...) took 121405.9654ms
[debug] Load.apply: load took 121423.7406ms
[debug] Load.apply: resolveProjects took 1.884ms
[debug] Load.apply: finalTransforms took 398.4398ms
[debug] Load.apply: config.delegates took 5.394ms
[debug] Load.apply: Def.make(settings)... took 1338.5618ms
[debug] Load.apply: structureIndex took 1241.145ms
[debug] Load.apply: mkStreams took 0.1111ms
[info] set current project to SparkScalaCourse (in build file:/C:/Users/swathi/Documents/codes/spark/SparkScalaCourse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50265 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50265, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/C:/Users/swathi/Documents/codes/spark/SparkScalaCourse/)
[debug] > Exec(idea-shell, None, None)
[warn] In the last 4229 seconds, 9.121 (0.2%) were spent in GC. [Heap: 0.07GB free of 0.13GB, max 1.50GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
